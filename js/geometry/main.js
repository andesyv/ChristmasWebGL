exports.genCone = function(nx = 3)
{
    if (typeof nx !== "number" || nx < 3)
        nx = 3;

    const xDegrees = 2 * Math.PI / nx;

    let vertices = new Float32Array(nx * 3 * 8 * 2);
    let vIndex = 0;

    for (i = 0; i < nx; ++i)
    {
        // First vertex
        let dx = xDegrees * i;
        let pos = [Math.cos(dx), 0.0, Math.sin(dx)];
        for (j = 0; j < 8; j++, vIndex++)
            vertices[vIndex] = (j < 6) ? pos[j % 3] : 0;

        // Second vertex
        dx = xDegrees * (i + 1);
        pos = [Math.cos(dx), 0.0, Math.sin(dx)];
        for (j = 0; j < 8; j++, vIndex++)
            vertices[vIndex] = (j < 6) ? pos[j % 3] : 0;

        // Third vertex
        for (j = 0; j < 8; j++, vIndex++)
            vertices[vIndex] = 0;
    }

    for (i = 0; i < nx; ++i)
    {
        // First vertex
        let dx = xDegrees * (i + 1);
        let pos = [Math.cos(dx), 0.0, Math.sin(dx)];
        for (j = 0; j < 8; j++, vIndex++)
            vertices[vIndex] = (j < 6) ? pos[j % 3] : 0;

        // Second vertex
        dx = xDegrees * i;
        pos = [Math.cos(dx), 0.0, Math.sin(dx)];
        for (j = 0; j < 8; j++, vIndex++)
            vertices[vIndex] = (j < 6) ? pos[j % 3] : 0;

        // Third vertex
        pos = [0, 1, 0, 0, 1, 0, 0, 0];
        for (j = 0; j < 8; j++, vIndex++)
            vertices[vIndex] = pos[j];
    }

    return {
        "vertices": vertices,
        "vertexCount": vertices.length / 8
    };
}

exports.box = new Float32Array([
    // x, y, z          // normal       // u, v
    -1.0, -1.0, 1.0,    0.0, 0.0, 1.0,  0.0, 0.0,
    1.0, -1.0, 1.0,     0.0, 0.0, 1.0,  1.0, 0.0,
    1.0, 1.0, 1.0,      0.0, 0.0, 1.0,  1.0, 1.0,

    1.0, 1.0, 1.0,      0.0, 0.0, 1.0,  1.0, 1.0,
    -1.0, 1.0, 1.0,     0.0, 0.0, 1.0,  0.0, 1.0,
    -1.0, -1.0, 1.0,    0.0, 0.0, 1.0,  0.0, 0.0,


    1.0, -1.0, 1.0,     1.0, 0.0, 0.0,  0.0, 0.0,
    1.0, -1.0, -1.0,    1.0, 0.0, 0.0,  1.0, 0.0,
    1.0, 1.0, -1.0,     1.0, 0.0, 0.0,  1.0, 1.0,

    1.0, 1.0, -1.0,     1.0, 0.0, 0.0,  1.0, 1.0,
    1.0, 1.0, 1.0,      1.0, 0.0, 0.0,  0.0, 1.0,
    1.0, -1.0, 1.0,     1.0, 0.0, 0.0,  0.0, 0.0,


    -1.0, 1.0, 1.0,     0.0, 1.0, 0.0,  0.0, 0.0,
    1.0, 1.0, 1.0,      0.0, 1.0, 0.0,  1.0, 0.0,
    1.0, 1.0, -1.0,     0.0, 1.0, 0.0,  1.0, 1.0,

    1.0, 1.0, -1.0,     0.0, 1.0, 0.0,  1.0, 1.0,
    -1.0, 1.0, -1.0,    0.0, 1.0, 0.0,  0.0, 1.0,
    -1.0, 1.0, 1.0,     0.0, 1.0, 0.0,  0.0, 0.0,


    1.0, -1.0, -1.0,    0.0, 0.0, -1.0,  0.0, 0.0,
    -1.0, -1.0, -1.0,   0.0, 0.0, -1.0,  1.0, 0.0,
    -1.0, 1.0, -1.0,    0.0, 0.0, -1.0,  1.0, 1.0,

    -1.0, 1.0, -1.0,    0.0, 0.0, -1.0,  1.0, 1.0,
    1.0, 1.0, -1.0,     0.0, 0.0, -1.0,  0.0, 1.0,
    1.0, -1.0, -1.0,    0.0, 0.0, -1.0,  0.0, 0.0,


    -1.0, -1.0, -1.0,   -1.0, 0.0, 0.0,  0.0, 0.0,
    -1.0, -1.0, 1.0,    -1.0, 0.0, 0.0,  1.0, 0.0,
    -1.0, 1.0, 1.0,     -1.0, 0.0, 0.0,  1.0, 1.0,

    -1.0, 1.0, 1.0,     -1.0, 0.0, 0.0,  1.0, 1.0,
    -1.0, 1.0, -1.0,    -1.0, 0.0, 0.0,  0.0, 1.0,
    -1.0, -1.0, -1.0,   -1.0, 0.0, 0.0,  0.0, 0.0,


    1.0, -1.0, 1.0,     0.0, 1.0, 0.0,  0.0, 0.0,
    -1.0, -1.0, 1.0,    0.0, 1.0, 0.0,  1.0, 0.0,
    -1.0, -1.0, -1.0,   0.0, 1.0, 0.0,  1.0, 1.0,

    -1.0, -1.0, -1.0,   0.0, -1.0, 0.0,  1.0, 1.0,
    1.0, -1.0, -1.0,    0.0, -1.0, 0.0,  0.0, 1.0,
    1.0, -1.0, 1.0,     0.0, -1.0, 0.0,  0.0, 0.0
]);
